@model IEnumerable<Models.Users>

@{
    ViewData["Title"] = "Chat";
}

<div class="container-fluid mt-5">
    <div class="chat-container">
        <div class="chat-list shadow-lg rounded-lg">
            <div class="chat-list-header">
                <span>Sohbetler</span>
                <button class="btn btn-sm btn-light chat-btn-effect" data-bs-toggle="modal" data-bs-target="#userListModal">+</button>
            </div>
            <ul class="list-group list-group-flush" id="chatList">
                <!-- Dinamik olarak SignalR ile doldurulacak -->
            </ul>
        </div>

        <div class="chat-window shadow-lg rounded-lg" id="chatWindow">
            <div class="chat-window-header" id="chatWindowHeader">Sohbet Seçin</div>
            <div class="chat-messages p-3" id="chatMessages">
                <!-- Mesajlar buraya yüklenecek -->
            </div>
            <div class="chat-input">
                <input type="text" id="messageInput" class="form-control rounded-pill" placeholder="Bir mesaj yaz..." aria-label="Bir mesaj yaz..." aria-describedby="button-send" onkeypress="checkEnter(event)">
                <button class="btn btn-primary chat-btn-effect rounded-pill" id="button-send" onclick="sendMessage()">Gönder</button>
            </div>
        </div>
    </div>

    <!-- Yeni Sohbet Modal -->
    <div class="modal fade" id="userListModal" tabindex="-1" aria-labelledby="userListModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userListModalLabel">Yeni Sohbet Başlat</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group" id="userList">
                        @foreach (var user in Model)
                        {
                            <li class="list-group-item user-list-item" onclick="startChatWithUser('@user.Id', '@user.FirstName', '@user.LastName')">
                                @user.FirstName @user.LastName
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f3f4f6;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .chat-container {
        display: flex;
        height: calc(85vh - 56px);
        overflow: hidden;
        gap: 20px;
        animation: fadeIn 0.8s ease-in-out;
    }

    .chat-list {
        width: 300px;
        background: linear-gradient(145deg, #ffffff, #e6e6e6);
        transition: all 0.3s ease;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        border-radius: 12px;
    }

    .chat-list-header {
        padding: 15px;
        background-color: #075e54;
        color: white;
        border-bottom: 1px solid #ddd;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 12px 12px 0 0;
        animation: slideDown 0.5s ease-in-out;
    }

    .chat-window {
        flex: 1;
        padding: 20px;
        background-color: #fafafa;
        border-radius: 12px;
        display: flex;
        flex-direction: column;
        animation: slideIn 0.5s ease-in-out;
        transition: all 0.3s ease;
    }

    .chat-window-header {
        font-size: 1.5rem;
        color: #333;
        font-weight: bold;
        border-bottom: 2px solid #ddd;
        margin-bottom: 15px;
        padding-bottom: 10px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background-color: #f1f1f1;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }

    .sent, .received {
        padding: 12px;
        border-radius: 12px;
        margin-bottom: 10px;
        max-width: 70%;
        word-wrap: break-word;
        font-size: 0.9rem;
        animation: messageSlide 0.5s ease-in-out;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .sent {
        background-color: #dcf8c6;
        align-self: flex-end;
        animation: sentMessage 0.5s ease-in-out;
    }

    .received {
        background-color: #ffffff;
        align-self: flex-start;
        animation: receivedMessage 0.5s ease-in-out;
    }

    .chat-input {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 10px;
        background-color: #f1f1f1;
        padding: 10px;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .chat-btn-effect {
        background-color: #075e54;
        color: white;
        padding: 10px 20px;
        transition: transform 0.2s ease, background-color 0.3s ease-in-out;
        border-radius: 50px;
    }

    .chat-btn-effect:hover {
        background-color: #128c7e;
        transform: scale(1.05);
    }

    .chat-btn-effect:active {
        transform: scale(0.95);
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideDown {
        from { transform: translateY(-30px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    @@keyframes messageSlide {
        from { transform: translateY(30px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes sentMessage {
        from { opacity: 0; transform: scale(0.95); }
        to { opacity: 1; transform: scale(1); }
    }

    @@keyframes receivedMessage {
        from { opacity: 0; transform: scale(1.05); }
        to { opacity: 1; transform: scale(1); }
    }
</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script type="text/javascript">
        let selectedUser = null;
        let senderId = null;
        let lastMessageDate = null;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        connection.on("ReceiveMessage", function (message) {
            const isSender = message.senderId == senderId;
            addMessageToList(message.senderId, message.receiverId, message.content, message.timestamp, isSender);
        });

        connection.start().then(() => {
            loadUserId();
            loadChatList();
        }).catch(function (err) {
            console.error('SignalR bağlantı hatası:', err.toString());
        });

        function loadUserId() {
            const token = getJwtToken();
            if (token) {
                senderId = parseInt(getUserIdFromToken(token));
                console.log("Oturum açmış kullanıcı ID:", senderId);
            } else {
                console.error("JWT token bulunamadı.");
            }
        }

        function getJwtToken() {
            const name = "JwtToken=";
            const decodedCookie = decodeURIComponent(document.cookie);
            const ca = decodedCookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i].trim();
                if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
            }
            return "";
        }

        function getUserIdFromToken(token) {
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            const payload = JSON.parse(jsonPayload);
            return payload["nameid"];
        }

        function loadChatList() {
            fetch('/Chat/GetChatList')
                .then(response => response.json())
                .then(chats => {
                    const chatList = document.getElementById("chatList");
                    chatList.innerHTML = '';

                    chats.forEach(chat => {
                        const li = document.createElement('li');
                        li.classList.add('list-group-item');
                        li.textContent = chat.userName;
                        li.dataset.userId = chat.userId;
                        li.onclick = () => startChatWithUser(chat.userId, chat.userName);
                        chatList.appendChild(li);
                    });
                })
                .catch(error => console.error('Sohbet listesi yüklenemedi:', error));
        }

        function startChatWithUser(userId, userName) {
            selectedUser = userId;
            document.getElementById("chatWindowHeader").textContent = `Sohbet: ${userName}`;
            $('#userListModal').modal('hide');

            highlightSelectedChat(userId);

            loadMessageHistory(userId);
        }

        function highlightSelectedChat(userId) {
            document.querySelectorAll('#chatList .list-group-item').forEach(item => {
                item.classList.remove('active');
            });

            const selectedItem = document.querySelector(`#chatList .list-group-item[data-user-id='${userId}']`);
            if (selectedItem) {
                selectedItem.classList.add('active');
            }
        }

        function loadMessageHistory(userId) {
            fetch(`/Chat/GetMessageHistory?userId=${userId}`)
                .then(response => response.json())
                .then(messages => {
                    const chatMessages = document.getElementById("chatMessages");
                    chatMessages.innerHTML = '';

                    messages.forEach(message => {
                        const isSender = message.senderId == senderId;
                        const senderName = isSender ? 'You' : message.senderName;
                        addMessageToList(senderName, message.receiverId, message.messageContent, message.timestamp, isSender);
                    });
                })
                .catch(error => console.error('Mesaj geçmişi yüklenemedi:', error));
        }

        function addMessageToList(senderName, receiverId, content, timestamp, isSender) {
            const chatMessages = document.getElementById("chatMessages");
            const messageDate = new Date(timestamp);
            const today = new Date();
            const yesterday = new Date();
            yesterday.setDate(today.getDate() - 1);
            
            const dateString = messageDate.toLocaleDateString();
            const timeString = messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            if (lastMessageDate !== dateString) {
                const dateSeparator = document.createElement("div");
                dateSeparator.classList.add("date-separator");
                
                if (messageDate.toDateString() === today.toDateString()) {
                    dateSeparator.textContent = "Bugün";
                } else if (messageDate.toDateString() === yesterday.toDateString()) {
                    dateSeparator.textContent = "Dün";
                } else {
                    dateSeparator.textContent = dateString;
                }
                
                chatMessages.appendChild(dateSeparator);
                lastMessageDate = dateString;
            }

            const messageElement = document.createElement("div");
            messageElement.classList.add(isSender ? "sent" : "received", "mb-2", "rounded");
            messageElement.innerHTML = `<strong>${senderName}:</strong> ${content} <span class="message-time">${timeString}</span>`;
            chatMessages.appendChild(messageElement);

            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function sendMessage() {
            const message = document.getElementById("messageInput").value;

            if (!selectedUser) {
                alert('Lütfen bir kullanıcı seçin.');
                return;
            }

            if (message.trim() === "") {
                alert('Boş mesaj gönderilemez.');
                return;
            }

            fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ receiverId: selectedUser, messageContent: message })
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Mesaj gönderilemedi');
                }

                addMessageToList('You', selectedUser, message, new Date().toISOString(), true);
                document.getElementById("messageInput").value = ''; 
            }).catch(error => {
                console.error('Error:', error);
            });
        }

        function checkEnter(event) {
            if (event.key === "Enter") {
                sendMessage();
            }
        }
    </script>
}
